"use client";
import { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import { useRouter, usePathname } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";

// Định nghĩa các components con
const PhotoTour = ({ onNavigate }: { onNavigate: (url: string) => void }) => {
  return (
    <div>
      <h2 className="text-2xl font-semibold mb-6">Tour tham quan qua ảnh</h2>
      
      <div className="mb-6">
        <p className="text-gray-600 mb-4">
          Ảnh đẹp sẽ giúp khách hàng hình dung về trải nghiệm tại nơi ở của bạn. Hãy bắt đầu bằng việc tải lên ít nhất 5 ảnh.
        </p>
        
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
          <div className="relative aspect-square rounded-lg overflow-hidden border border-gray-200">
            <div className="absolute inset-0 flex items-center justify-center bg-gray-50">
              <svg className="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M12 4v16m8-8H4" />
              </svg>
            </div>
          </div>
          
          <div className="relative aspect-square rounded-lg overflow-hidden border border-gray-200">
            <div className="absolute inset-0 flex items-center justify-center bg-gray-50">
              <svg className="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M12 4v16m8-8H4" />
              </svg>
            </div>
          </div>
          
          <div className="relative aspect-square rounded-lg overflow-hidden border border-gray-200">
            <div className="absolute inset-0 flex items-center justify-center bg-gray-50">
              <svg className="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M12 4v16m8-8H4" />
              </svg>
            </div>
          </div>
        </div>
        
        <motion.button
          whileHover={{ scale: 1.03 }}
          whileTap={{ scale: 0.97 }}
          className="mt-4 px-6 py-3 bg-gray-900 text-white rounded-lg"
          onClick={() => onNavigate("/additional-photos")}
        >
          Tải ảnh lên
        </motion.button>
      </div>
    </div>
  );
};

const Title = () => {
  return (
    <div>
      <h2 className="text-2xl font-semibold mb-6">Tiêu đề</h2>
      
      <div className="mb-6">
        <p className="text-gray-600 mb-4">
          Tiêu đề nên mô tả ngắn gọn điểm đặc biệt của chỗ ở bạn. Tránh nhắc đến vị trí vì sẽ được hiển thị riêng.
        </p>
        
        <div className="mb-4">
          <textarea
            className="w-full p-4 border border-gray-300 rounded-lg text-lg focus:ring-2 focus:ring-black focus:border-transparent"
            rows={3}
            placeholder="Ví dụ: Căn hộ hiện đại và đầy đủ tiện nghi với ban công view thành phố"
          ></textarea>
          <p className="text-sm text-gray-500 mt-2">0/32 ký tự</p>
        </div>
        
        <motion.button
          whileHover={{ scale: 1.03 }}
          whileTap={{ scale: 0.97 }}
          className="mt-4 px-6 py-3 bg-gray-900 text-white rounded-lg"
        >
          Lưu tiêu đề
        </motion.button>
      </div>
    </div>
  );
};

const AdditionalPhoto = ({ onBack, listingId }: { onBack: () => void, listingId: string | null }) => {
  return (
    <div>
      <button onClick={onBack} className="mb-4 flex items-center text-gray-600">
        <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7" />
        </svg>
        Quay lại
      </button>
      
      <h2 className="text-2xl font-semibold mb-6">Thêm ảnh cho phòng {listingId}</h2>
      
      <div className="mb-6">
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p className="mt-4 text-gray-600">Kéo và thả ảnh vào đây hoặc bấm để tải lên</p>
          <p className="mt-2 text-sm text-gray-500">Hỗ trợ JPG, PNG. Tối đa 10MB mỗi ảnh.</p>
          <button className="mt-4 px-4 py-2 bg-gray-900 text-white rounded-lg">Chọn ảnh</button>
        </div>
      </div>
    </div>
  );
};



export default function ListingSetup() {
  const router = useRouter();
  const pathname = usePathname();
  const [activeContent, setActiveContent] = useState("photo-tour");

  // Trích xuất ID từ URL một cách an toàn hơn
  const pathSegments = pathname ? pathname.split("/") : [];
  const listingId = pathSegments.length > 4 ? pathSegments[4] : null;

  useEffect(() => {
    if (pathname && pathname.includes("/details/title")) {
      setActiveContent("title");
    } else if (pathname && pathname.includes("/details/property-type")) {
      setActiveContent("property-type");
    } else if (pathname && pathname.includes("/details/additional-photos")) {
      setActiveContent("additional-photos");
    } else {
      setActiveContent("photo-tour");
    }
  }, [pathname]);

  const handleContentChange = (contentType: string) => {
    if (contentType === "photo-tour") {
      router.push(`/host/dashboard/listing/${listingId}/details/photo-tour`);
    } else if (contentType === "title") {
      router.push(`/host/dashboard/listing/${listingId}/details/title`);
    } else if (contentType === "property-type") {
      router.push(`/host/dashboard/listing/${listingId}/details/property-type`);
    }
    setActiveContent(contentType);
  };

  const renderRightContent = () => {
    switch (activeContent) {
      case "photo-tour":
        return <PhotoTour onNavigate={(url: string) => {
          if (url === "/additional-photos") {
            handleContentChange("additional-photos");
          } else {
            router.push(url);
          }
        }} />;
      case "title":
        return <Title />;
      case "additional-photos":
        return (
          <AdditionalPhoto
            onBack={() => handleContentChange("photo-tour")}
            listingId={listingId}
          />
        );
      case "property-type":
        return <PropertyType />;

      default:
        return <PhotoTour onNavigate={(url: string) => router.push(url)} />;
    }
  };

  return (
    <div className="min-h-screen bg-white">
      {/* Main Content */}
      <div className="flex flex-col md:flex-row">
        {/* Left Sidebar */}
        <div className="w-full md:w-1/3 max-w-md border-b md:border-b-0 md:border-r border-gray-200 p-6">
          <div>
            <Link
              href="/listing"
              className="inline-flex items-center text-gray-500 mb-6"
            >
              <svg
                className="h-5 w-5 mr-2"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M15 19l-7-7 7-7"
                />
              </svg>
              Trình chỉnh sửa mục cho thuê
            </Link>

            <div className="mb-8">
              <div className="flex flex-col sm:flex-row gap-2 mb-4">
                <motion.button
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.97 }}
                  className="py-2 px-4 bg-gray-100 rounded-full text-sm"
                >
                  Chỗ ở cho thuê của bạn
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.97 }}
                  className="py-2 px-4 bg-gray-100 rounded-full text-sm"
                >
                  Hướng dẫn khi khách đến
                </motion.button>
              </div>

              <motion.div
                className="border border-gray-200 rounded-lg p-4 mb-4"
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                whileHover={{ boxShadow: "0 4px 12px rgba(0,0,0,0.1)" }}
              >
                <div className="flex items-start">
                  <motion.div
                    className="flex-shrink-0 h-2 w-2 mt-2 bg-red-500 rounded-full"
                    animate={{
                      scale: [1, 1.2, 1],
                    }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      repeatType: "loop",
                    }}
                  ></motion.div>
                  <div className="ml-4">
                    <motion.h3
                      className="font-medium"
                      initial={{ color: "#000000" }}
                      animate={{ color: "#000000" }}
                      whileHover={{ color: "#ff385c" }}
                    >
                      Hoàn thành các bước bắt buộc
                    </motion.h3>
                    <p className="text-sm text-gray-500 mt-1">
                      Vui lòng hoàn tất các nhiệm vụ cuối cùng này để đăng mục
                      cho thuê và bắt đầu nhận yêu cầu đặt phòng.
                    </p>
                  </div>
                  <motion.div
                    className="ml-auto"
                    whileHover={{ x: 3 }}
                    transition={{ type: "spring", stiffness: 400 }}
                  >
                    <svg
                      className="h-5 w-5 text-gray-400"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M9 5l7 7-7 7"
                      />
                    </svg>
                  </motion.div>
                </div>
              </motion.div>

              {/* Photo Tour Section */}
              <motion.div
                className="border border-gray-200 rounded-lg p-4 mb-4 cursor-pointer"
                onClick={() => handleContentChange("photo-tour")}
                whileHover={{
                  backgroundColor: "rgba(0,0,0,0.02)",
                  boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
                }}
              >
                <h3 className="font-medium mb-2">Tour tham quan qua ảnh</h3>
                <p className="text-sm text-gray-700">
                  1 phòng ngủ · 1 giường · 1 phòng tắm
                </p>

                <div className="mt-4 relative">
                  <div className="relative overflow-hidden rounded-lg">
                    <div className="flex">
                      <div className="relative h-32 w-32 flex-shrink-0">
                        <Image
                          src="https://a0.muscache.com/im/pictures/miso/Hosting-1371412356785196440/original/138d58a6-d4b6-4dd3-9555-123af2583d87.jpeg?im_w=240"
                          alt="Property view"
                          fill
                          sizes="128px"
                          style={{ objectFit: "cover" }}
                          className="rounded-l-lg"
                        />
                        <div className="absolute top-2 left-2 bg-white bg-opacity-80 text-xs px-2 py-1 rounded">
                          5 ảnh
                        </div>
                      </div>
                      <div className="relative h-32 w-32 flex-shrink-0 ml-1">
                        <Image
                          src="https://a0.muscache.com/im/pictures/miso/Hosting-1371412356785196440/original/138d58a6-d4b6-4dd3-9555-123af2583d87.jpeg?im_w=240"
                          alt="Another view"
                          fill
                          sizes="128px"
                          style={{ objectFit: "cover" }}
                          className="rounded-r-lg"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Title Section */}
              <motion.div
                className="border border-gray-200 rounded-lg p-4 mb-4 cursor-pointer"
                onClick={() => handleContentChange("title")}
                whileHover={{
                  backgroundColor: "rgba(0,0,0,0.02)",
                  boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
                }}
              >
                <h3 className="font-medium mb-2">Tiêu đề</h3>
                <motion.button
                  className="mt-4 px-4 py-2 bg-gray-900 text-white rounded-lg text-sm"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Xem
                </motion.button>
              </motion.div>

              {/* Property Type Section */}
              <motion.div
                className="border border-gray-200 rounded-lg p-4 cursor-pointer"
                onClick={() => handleContentChange("property-type")}
                whileHover={{
                  backgroundColor: "rgba(0,0,0,0.02)",
                  boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
                }}
              >
                <h3 className="font-medium mb-2">Loại chỗ ở</h3>
                <h3 className="text-sm font-medium text-gray-500">
                  Toàn bộ nhà - Nhà
                </h3>
              </motion.div>
            </div>
          </div>
        </div>

        {/* Right Content with Smooth Transitions */}
        <AnimatePresence mode="wait">
          <motion.div
            key={activeContent}
            className="w-full md:w-2/3 p-6"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
          >
            {renderRightContent()}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
}







"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import axios from "@/lib/axios";
import { isAxiosError } from "axios";
import { toast } from "react-hot-toast";

export default function Title() {
  const params = useParams();
  const [title, setTitle] = useState("");
  const [originalTitle, setOriginalTitle] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isFetching, setIsFetching] = useState(true);

  // Lấy thông tin sản phẩm hiện tại
  useEffect(() => {
    const fetchProductDetails = async () => {
      if (!params.id) return;

      try {
        setIsFetching(true);
        const response = await axios.get(
          `/business/detail-product/${params.id}`
        );
        setTitle(response.data.title || "");
        setOriginalTitle(response.data.title || "");
      } catch (error) {
        console.error("Error fetching product:", error);
        toast.error("Không thể tải thông tin sản phẩm");
      } finally {
        setIsFetching(false);
      }
    };

    fetchProductDetails();
  }, [params.id]);

  interface Product {
    title: string;
  }

  interface UpdateProductPayload {
    title: string;
  }

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!title.trim()) {
      toast.error("Tiêu đề không được để trống");
      return;
    }

    if (title === originalTitle) {
      toast("Không có thay đổi nào", { icon: "ℹ️" });
      return;
    }

    try {
      setIsLoading(true);

      // Đảm bảo gửi đúng định dạng mà server mong đợi
      const response = await axios.put(
        `/business/update-product/${params.id}`,
        {
          title,
        }
      );

      // Kiểm tra response để đảm bảo thành công
      console.log("Server response:", response.data);

      setOriginalTitle(title);
      toast.success("Cập nhật tiêu đề thành công");
    } catch (error) {
      console.error("Error updating title:", error);
      // Hiển thị thông báo lỗi chi tiết hơn
      if (isAxiosError(error)) {
        const errorMessage =
          error.response?.data?.message || "Lỗi không xác định";
        toast.error(`Lỗi: ${errorMessage}`);
      } else {
        toast.error("Không thể cập nhật tiêu đề");
      }
    } finally {
      setIsLoading(false);
    }
  };

  if (isFetching) {
    return <div className="p-4">Đang tải thông tin...</div>;
  }

  return (
    <div className="p-4 bg-white rounded-lg shadow-sm">
      <h2 className="text-xl font-medium mb-4">Cập nhật tiêu đề</h2>

      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label
            htmlFor="title"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Tiêu đề sản phẩm
          </label>
          <input
            id="title"
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Nhập tiêu đề sản phẩm"
          />
        </div>

        <div className="flex items-center justify-between">
          <button
            type="submit"
            disabled={isLoading || title === originalTitle || !title.trim()}
            className={`px-4 py-2 text-white bg-indigo-600 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${
              isLoading || title === originalTitle || !title.trim()
                ? "opacity-50 cursor-not-allowed"
                : ""
            }`}
          >
            {isLoading ? "Đang cập nhật..." : "Cập nhật tiêu đề"}
          </button>

          {title !== originalTitle && (
            <button
              type="button"
              onClick={() => setTitle(originalTitle)}
              className="px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
            >
              Hủy thay đổi
            </button>
          )}
        </div>
      </form>

      {originalTitle && (
        <div className="mt-4 text-sm text-gray-500">
          <p>
            Tiêu đề hiện tại:{" "}
            <span className="font-medium">{originalTitle}</span>
          </p>
        </div>
      )}
    </div>
  );
}


// pages/property-listing.js
import { useState } from 'react';
import { ChevronLeft, ChevronDown, Plus, Minus, Eye } from 'lucide-react';
import Head from 'next/head';
import Image from 'next/image';

export default function PropertyListing() {
  const [floors, setFloors] = useState(1);
  const [currentFloor, setCurrentFloor] = useState(1);
  const [buildYear, setBuildYear] = useState('');
  
  return (
    <div className="min-h-screen bg-white">
      <main className="max-w-6xl mx-auto py-8 px-4 flex">
        {/* Right Side - Property Details Form */}
        <div className="hidden lg:block lg:w-1/2 pl-6">
          <h2 className="text-2xl font-semibold mb-6">Loại chỗ ở</h2>

          <div className="mb-6">
            <label className="block text-sm text-gray-500 mb-2">
              Loại nào giống nhà/phòng cho thuê của bạn nhất?
            </label>
            <div className="relative">
              <select className="w-full border border-gray-300 rounded-xl py-4 px-4 bg-white appearance-none focus:outline-none focus:ring-2 focus:ring-black">
                <option>Nhà</option>
              </select>
              <ChevronDown className="absolute right-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm text-gray-500 mb-2">
              Loại chỗ ở
            </label>
            <div className="relative">
              <select className="w-full border border-gray-300 rounded-xl py-4 px-4 bg-white appearance-none focus:outline-none focus:ring-2 focus:ring-black">
                <option>Cabin</option>
              </select>
              <ChevronDown className="absolute right-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
            </div>
            <p className="mt-2 text-sm text-gray-500">
              Một ngôi nhà được làm bằng các vật liệu tự nhiên như gỗ và nằm giữa khung cảnh thiên nhiên.
            </p>
          </div>

          <div className="mb-6">
            <label className="block text-sm text-gray-500 mb-2">
              Loại hình cho thuê
            </label>
            <div className="relative">
              <select className="w-full border border-gray-300 rounded-xl py-4 px-4 bg-white appearance-none focus:outline-none focus:ring-2 focus:ring-black">
                <option>Toàn bộ nhà</option>
              </select>
              <ChevronDown className="absolute right-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
            </div>
            <p className="mt-2 text-sm text-gray-500">
              Khách sẽ dùng toàn bộ chỗ ở này cho riêng mình. Chỗ ở này thường có một phòng ngủ, một phòng tắm và bếp.
            </p>
          </div>

          <div className="mb-6">
            <label className="block text-sm text-gray-500 mb-2">
              Tòa nhà đó có bao nhiêu tầng?
            </label>
            <div className="flex items-center">
              <button 
                onClick={() => setFloors(Math.max(1, floors - 1))}
                className="border border-gray-300 rounded-full p-2 hover:bg-gray-100"
              >
                <Minus className="w-4 h-4" />
              </button>
              <span className="mx-4 text-lg">{floors}</span>
              <button 
                onClick={() => setFloors(floors + 1)}
                className="border border-gray-300 rounded-full p-2 hover:bg-gray-100"
              >
                <Plus className="w-4 h-4" />
              </button>
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm text-gray-500 mb-2">
              Nhà/phòng cho thuê nằm ở tầng mấy?
            </label>
            <div className="flex items-center">
              <button 
                onClick={() => setCurrentFloor(Math.max(1, currentFloor - 1))}
                className="border border-gray-300 rounded-full p-2 hover:bg-gray-100"
              >
                <Minus className="w-4 h-4" />
              </button>
              <span className="mx-4 text-lg">{currentFloor}</span>
              <button 
                onClick={() => setCurrentFloor(Math.min(floors, currentFloor + 1))}
                className="border border-gray-300 rounded-full p-2 hover:bg-gray-100"
              >
                <Plus className="w-4 h-4" />
              </button>
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm text-gray-500 mb-2">
              Năm xây dựng
            </label>
            <input 
              type="text" 
              value={buildYear}
              onChange={(e) => setBuildYear(e.target.value)}
              className="w-full border border-gray-300 rounded-xl py-4 px-4 focus:outline-none focus:ring-2 focus:ring-black"
              placeholder="Năm xây dựng"
            />
          </div>

          <div className="mb-6">
            <label className="block text-sm text-gray-500 mb-2">
              Quy mô chỗ ở
            </label>
            <div className="relative">
              <select className="w-full border border-gray-300 rounded-xl py-4 px-4 bg-white appearance-none focus:outline-none focus:ring-2 focus:ring-black">
                <option>Đơn vị</option>
              </select>
              <ChevronDown className="absolute right-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
            </div>
            <p className="mt-2 text-sm text-gray-500">
              Diện tích không gian trong nhà mà khách được sử dụng.
            </p>
          </div>

          <div className="mt-8 flex justify-end">
            <button className="bg-black text-white rounded-lg py-3 px-6 font-medium hover:bg-gray-800">
              Lưu
            </button>
          </div>
        </div>
      </main>
    </div>
  );
}

